<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<!--<?xml-stylesheet href="xsl-stylesheets/html/docbook.xsl"
type="text/xml"?>-->

<book>
<title>Console Jabber Client manual</title>
<bookinfo>
	<author><firstname>Jacek</firstname><surname>Konieczny</surname></author>
	<author><firstname>Marcin</firstname><surname>Chojnowski</surname></author>
</bookinfo>

<preface><title>Introduction</title>

<para> Console Jabber Client (CJC) is simple Jabber client to run on a text
terminal.  It is far from being finished now, but it already has all basic
functionality and is quite usable.  </para>

</preface>

<!-- ************************************************* -->
<chapter><title>User interface</title>

<!-- ................................................. -->
<sect1><title>Basic layout</title>

<para>When CJC is started the first time its screen consists of:</para>

<itemizedlist>

<listitem><para> Top status bar </para></listitem>

<listitem><para> Main window with its status bar </para></listitem>

<listitem><para> Bottom status bar </para></listitem>

<listitem><para> Command line </para></listitem>

</itemizedlist>

<para>This is the "plain" layout. Other layouts may be chosen by modifying the "layout"
setting. Exact content of status bars is controlled by a theme.</para> 

</sect1>

<!-- ................................................. -->
<sect1><title>Windows and buffers</title>

<para>The part of the screen where most information is displayed is a window.
One of windows is the active window. By default there is only one window so it
is the active window. When multiple windows are available, the active one may be
changed using <keycombo
action="simul"><keycap>Alt</keycap><keycap>Tab</keycap></keycombo> key or
<command>/next</command>, <command>/prev</command> commands.</para>

<para>The content of a window is a buffer. Usually there are many buffers in CJC, but
only one may be displayed in a window. Buffer may contain: status messages, a
chat session, the roster, etc. Buffers may be switched using
<keycombo action="simul"><keycap>Alt</keycap><keycap>number</keycap></keycombo> key (or 
<keycombo action="seq"><keycap>Esc</keycap><keycap>number</keycap></keycombo>
on terminals where <keycap>Alt</keycap>/<keycap>Meta</keycap>
is not available or not working) or <command>/nextbuf</command>,
<command>/prevbuf</command> commands. A list of buffers containing anything new
is displayed in the bottom status bar. </para>

</sect1>

<!-- ................................................. -->
<sect1><title>Commands</title>

<para> CJC is driven by commands. Commands are entered preceded with slash
('/'). There are global commands, like <command>/quit</command>,
<command>/connect</command>, etc. and commands local to current buffer - e.g.
<command>/me</command> is valid only in a chat window.</para>

<para>Command may require some arguments. Parameters may be optional (like
reason for <command>/quit</command>), other are required (like user for
<command>/chat</command>). Usually arguments must be quoted when they contain
spaces or quotes, but some arguments don't need quoting and in fact cannot be
quoted. Such argument is always the last argument for command and usually is
some kind of message or description - like quit reason or chat message.</para>

<para>Examples of valid commands:</para>

<itemizedlist>

<listitem><para><userinput>/quit</userinput></para></listitem>

<listitem><para><userinput>/quit I must go</userinput></para></listitem>

<listitem><para><userinput>/chat someone</userinput></para></listitem>

<listitem><para><userinput>/chat user@domain anything</userinput></para></listitem>

<listitem><para><userinput>/chat @domain</userinput></para></listitem>

</itemizedlist>

<para>Username arguments (like the first argument of <command>/chat</command> command) may be
roster names or JIDs. Usernames which don't contain '@' are always searched in
roster, so to use JID which doesn't contain node part one must precede it with '@'.</para>

<para>Custom commands may be defined as aliases for other commands using
<command>/alias</command>. There are some built-in aliases for some commands -
these cannot be changed with <command>/alias</command> and
<command>/unalias</command> commands.</para> 

<para> There is an online help available for CJC commands.
<command>/help</command> without arguments displays all available commands and
built-in aliases. When given a command name as argument
<command>/help</command> displays its description.</para>

</sect1>

<!-- ................................................. -->
<sect1><title>Settings</title>

<para> CJC is very customizable. Its behaviour is controlled by various
settings, which may be modified with <command>/set</command> and
<command>/unset</command> commands. <command>/set</command> without arguments
displays all available settings with their values. <command>/set</command>
with one argument displays value and description of named setting.
<command>/set</command> with two arguments changes value of a setting.</para>

<para> Only two settings must be set to use CJC, these are:
<varname>jid</varname> and <varname>password</varname>. </para>

<para> Examples of variable setting: </para>

<itemizedlist>

<listitem><para><userinput>/set jid username@jabber.domain/CJC</userinput></para></listitem>

<listitem><para><userinput>/set away_priority 0</userinput></para></listitem>

<listitem><para><userinput>/set presence.auto_away_msg "I am gone"</userinput></para></listitem>

</itemizedlist>

<para> Please note, that values containing spaces or quotes must be quoted. </para>

</sect1>

</chapter>

<!-- ************************************************* -->
<chapter><title>Using CJC</title>

<!-- ................................................. -->
<sect1><title>Starting and exiting</title>

<sect2><title>Starting</title>

<para>CJC may be started by entering just <userinput>cjc</userinput> on shell
command line, but it can be given some arguments:</para>

<cmdsynopsis>
    <command>cjc</command>
    <arg>-c <replaceable>file</replaceable> </arg>
    <arg>-t <replaceable>file</replaceable> </arg>
    <arg>-l <replaceable>file</replaceable> </arg>
    <arg>-L <replaceable>file</replaceable> </arg>
    <arg>-P <replaceable>file</replaceable> </arg>
</cmdsynopsis>

<para> <arg>-c <replaceable>file</replaceable> </arg> argument selects
configuration file to use. If <replaceable>file</replaceable> contains slashes
('/') it is assumed to be in ~/.cjc/ directory. If you use default as config
file name default.conf file will be searched by CJC.</para>

<para> <arg>-t <replaceable>file</replaceable> </arg> selects theme to use
(themes are searched in ~/.cjc/themes by default).</para>
<para> <arg>-l <replaceable>file</replaceable> </arg> makes CJC write some debug logs
to the file.</para>
<para> <arg>-L <replaceable>file</replaceable> </arg> makes CJC append some debug logs to the file.</para>
<para> <arg>-P <replaceable>file</replaceable> </arg> makes CJC write profiling
statistics.</para>
</sect2>

<sect2><title>Exiting</title>

<para> CJC may be left using <command>/quit</command>. The command will accept
an optional <replaceable>reason</replaceable> argument, which will be sent to
the server if connected. </para>

<para> Examples: </para>
<para> <userinput> /quit </userinput></para>
<para> <userinput> /quit I must go </userinput></para>


</sect2>

</sect1>

<!-- ................................................. -->
<sect1><title>Connection</title>

<sect2><title>Configuration</title>

<para>To connect to a jabber server you must first set the <varname>jid</varname>
and the <varname>password</varname> settings. If your server differs from your
JID's domain you should also set the <varname>server</varname> setting. When your
server listens on nonstandard port number (other than 5222) you should set the
<varname>port</varname> setting. </para>

<para> Example: </para>

<para> <userinput> /set jid me@my.server/Home </userinput></para>
<para> <userinput> /set password "very secret" </userinput></para>

</sect2>

<sect2><title>Connecting</title>

<para>After configuring your account as described above you may connect to the
server using <command>/connect</command>. After connection is established the
presence is to "online" and the roster roster is retrieved.</para>

<para> Example: </para>

<para> <userinput> /connect </userinput></para>

</sect2>

<sect2><title>Disconnecting</title>

<para>To disconnect use the <command>/disconnect</command> command. Also the
<command>/quit</command> command disconnect current connection. Both commands
accept optional <replaceable>reason</replaceable> argument which will be sent to
the server. Disconnection is not instant - it must take a while so the
connection is closed cleanly and the reason is properly received by the
server.</para>

<para> Example: </para>

<para> <userinput> /disconnect </userinput></para>
<para> <userinput> /disconnect I must go </userinput></para>


</sect2>

</sect1>

<!-- ................................................. -->
<sect1><title>Roster</title>

<para>Roster is a list of contacts. It is stored on the server and received
just after connecting.</para>

<sect2><title>Roster buffer</title>

<para>Roster view is kept in a separate buffer - it is usually the buffer number
2, so you can look at it using 
<keycombo action="simul"><keycap>Alt</keycap><keycap>2</keycap></keycombo>.
Contacts in roster are divided into groups. Additionally to the groups defined in
the roster CJC may display three special groups in its roster buffer:</para>

<itemizedlist>

<listitem> <computeroutput>me</computeroutput> - this group contains all active
sessions of the current user including current CJC connection. </listitem>

<listitem> <computeroutput>unknown</computeroutput> - this group contains 
users which presence is known although they are not in the roster. </listitem>

<listitem> <computeroutput>unfiled</computeroutput> - this group contains 
users which doesn't belong to any roster group. </listitem>

</itemizedlist>

<para>Each contact in roster buffer is displayed along with his presence
information. Also the color of the entry depends of its presence.</para>

<para>By default all contacts are displayed, but this behaviour may be modified
by changing the <varname>roster.show</varname> setting. Its value is one of the
following: "all" (which is default and means all contacts), "available"
(only those, who are currently available), "unavailable" (only those who are
currently unavailable), "chat", "online", "away", "xa" (only those with named
presence mode). Multiple values may also be given - separated by commas.</para>

</sect2>

<sect2><title>Modifying roster</title>

<para>Users may be added to the roster using <command>/add</command>. The only
required argument is user's JID. Group may be defined using <arg>-group
<replaceable>group</replaceable></arg> argument. The name of the new contact is
defined by the last argument (not quoted).</para>

<para> Example - adds "friend@friendly.server" contact named "My Friend" to
group "friends": </para>

<para> <userinput> /add -group friends friend@friendly.server My Friend
</userinput></para>

<para> Please note, that adding a contact to the roster doesn't mean
subscription to its presence. Presence of the contact will not be known unless
it is subscribed using <command>/subscribe</command> command.</para>

<para> Contacts may be removed using <command>/remove</command> command. The only
(quoted) argument is user name or JID. </para>

<para> Example - both of the following commands remove contact added in the
previous example:</para>

<para> <userinput> /remove friend@friendly.server </userinput></para>

<para> <userinput> /remove "My Friend" </userinput></para>

<para> Contact name may be changed using <command>/rename</command> command. The
first argument is contact name or JID, the second (not quoted) is the new name.
</para>

<para> Example - the friend is not a friend anymore: </para>

<para> <userinput> /rename "My Friend" My Enemy </userinput></para>

<para> The list of groups user belongs to may also be changed - using
<command>/group</command> command. This commands has two forms. The first
argument is always a contact name or JID. In the first form the second argument
is a new list of groups. In the second form it is list of group changes. Each of
change is identified by group name preceded with "+" or "-" sign.</para>

<para> Example - the friend is not a friend anymore (cont). Both commands do the
same: </para>


<para> <userinput> /group "My Enemy" enemies </userinput></para>

<para> <userinput> /group "My Enemy" -friends +enemies </userinput></para>

</sect2>


</sect1>


<!-- ................................................. -->
<sect1><title>Presence</title>

<para> Presence is information about your current status for example: you're
busy and don't want to be disturbed anymore, you're able to set your custom
presence information that will be visible to the other users (as mentioned
before). With presence change you can also give reason why you're for example busy.</para>

<sect2><title>Changing presence information</title>

<para> Presence can be changed using commands: 

<command>/away, /dnd or /busy, /xa, /chatready,  </command>. 

All of them take one argument and it's a reason of presence change. 
Getting back to online presence is possible with 
<command> /back or /online </command> </para>

<para> Usage examples:</para>

<para> You are smoking cigarette:</para>
<para> <userinput> /away I'm smoking ;)</userinput></para>

<para> You're busy with your friend:</para>
<para> <userinput> /dnd  My friend is here</userinput></para>

<para> You've gone for longer period of time:</para>
<para> <userinput> /xa I've gone swimming </userinput></para>

<para> After you're ready to chat again you can type:</para>
<para> <userinput> /online I'm ready to chat </userinput>.

<command> /back </command> also gives ability to go online.
</para>
</sect2>

<sect2><title>Presence information control</title>

<para> There are also commands that allows supervise our and others presence
information. It is:</para>

<para>
<command> /sunscribe, /unsubscribe, /cancel </command> 
</para>

As described before <command> /subscribe </command> is needed to get users in
roster presence information and vice versa <command>/unsubscribe</command>  
removes such information. Another important command <command>/cancel</command> 
removes authorization for users.

</sect2>

<sect2><title>Auto-away</title>

<para>It's very nice feature that sets predefined presence mode and reason
information after some period of idle time. It can be defined directly in cjc or
or manualy by editing configuration file. Defaults are: AWAY after 5 minutes and
Extended Away after 15 minutes of user inactivity.</para>

<para>It easy to change this defaults using <command> /set </command>
command.</para>

For example:
<para> <userinput> /set presence.auto_away 3 </userinput> </para>
will set our presence to away
after 3 minutes of inactivity. It is also possible to set reason of our
automatic away. It can be done like that:
<para><userinput> /set presence.auto_away_msg "Walking around" </userinput></para>
This will set 'Walking around' description and it should be quoted as this
command will take only one argument.
<para>
The same goes for eXtended Away. It's done by litte bit diffrent command:
<para><userinput> /set presence.auto_xa 10</userinput> </para>
and changing description:
<para><userinput> /set presence.auto_xa.msg "I've gone for longer time"</userinput></para>
</para>
</sect2>

<sect2><title>Additional useful features</title>
<para>
It's easy now to keep predefined presence description. It will be set if no
description will be passed manualy or automatically to the options described
above. It can be set with following command:
<para><userinput> /set presence.keep_description "Important exam tommorow!"</userinput></para>
This will cause that 'Important exam tomorrow!' will be set everytime we change presence without our own description.
</para>
</sect2>
</sect1>

<!-- ................................................. -->
<sect1><title>Chat</title>
<para>Just like in most other Instant Messaging systems there are two ways of contacting other users. 
The first one is chat mode. Chat is used to carry conversation for a while
and after is started new windows will be created for each chat with new user. It
allows instant communication between users.</para>
<para> It's easy to start chat:</para>
<para><command> /chat JID </command> or <command> /chat roster_nickname
</command></para>
For example:
<para> <userinput> /chat friend@friend.org How are you?</userinput> </para>
This will start new chat window and send How are you? message to user. More
messages can be input in this newly created window. Our friends messages will
apear in that window too. 
</sect1>

<!-- ................................................. -->
<sect1><title>Messages</title>
<para>Using message mode is good idea for sending quick message to someone. It's
not intended to make long conversation with messaging people.</para>
<para> It's also easy to send message:</para>
<para><command> /msg JID </command> or <command> /msg roster_nickname
</command></para>
For example:
<para> <userinput> /msg friend@friend.org Call me at 8 p.m.</userinput> </para>
This will send message asking for a call. New window will open with some
information regarding our newly sent message.
</sect1>
</chapter>

<!-- ************************************************* -->
<appendix><title>Keyboard reference</title>
<para>
<para> Windows switching: </para>
<para><command> Alt-TAB </command></para>
<para><command> Alt-*window_number* </command></para>
</para>

</appendix>

<appendix><title>Command reference</title>
<table>
  <title>Global commands:</title>
  <tgroup cols="2">
    <thead>
      <row>
        <entry>Command</entry>
        <entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>/alias name command [arg...]</entry>
        <entry>Defines an aliases for command. When the alias is used $1, $2,
etc. are replaced with alias arguments.</entry>
      </row>
      <row>
        <entry>/bind [function [[table] keyname]]</entry>
        <entry>Without arguments - shows current keybindings otherwise binds
given function to a key.</entry>
      </row>
    </tbody>
   </tgroup>
</table>

<table>
  <title>Screen commands:</title>
  <tgroup cols="2">
    <thead>
      <row>
        <entry>Command</entry>
        <entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>/beep</entry>
        <entry>Makes the terminal 'beep'</entry>
      </row>
      <row>
        <entry>/move [oldnumber] number</entry>
        <entry>Change buffer order</entry>
      </row>
      <row>
        <entry>/next</entry>
        <entry>Change active window to the next one</entry>
      </row>
    </tbody>
   </tgroup>
</table>
</appendix>

<appendix><title>Settings reference</title>
<para>(...)</para>
</appendix>


</book>

<!--
 vi: tw=80 indentexpr=
-->
